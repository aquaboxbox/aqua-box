#pragma kernel HashParticles
#pragma kernel ClearTable
#pragma kernel MapTable

float HashScale;
float3 HashSize;
float3 HashTranslate;

float4x4 _WorldToLocal;

RWStructuredBuffer<int2> IndexMap;
RWStructuredBuffer<int2> Table;

int Hash(float3 p) {
	p = mul(_WorldToLocal, float4(p, 1)).xyz;
	p = (p - HashTranslate) * HashScale;
	int3 i = clamp(p, 0, HashSize - 1);

	return i.x + i.y * HashSize.x + i.z * HashSize.x * HashSize.y;
}

#define THREADS 128

StructuredBuffer<float4> Particles;
StructuredBuffer<float4> Boundary;

int NumParticles;
int TotalParticles;

[numthreads(THREADS,1,1)]
void HashParticles(int id : SV_DispatchThreadID) {
	int2 index;
	index.y = id;

	if (id < NumParticles) {
		index.x = Hash(Particles[id].xyz);
		IndexMap[id] = index;
	} else if (id < TotalParticles) {
		int k = id - NumParticles;
		index.x = Hash(Boundary[k].xyz);
		IndexMap[id] = index;
	}
}

[numthreads(THREADS, 1, 1)]
void ClearTable(int id : SV_DispatchThreadID) {
	if (id >= TotalParticles) { return; }
	Table[id] = 0;
}

[numthreads(THREADS, 1, 1)]
void MapTable(int id : SV_DispatchThreadID) {
	if (id >= TotalParticles) { return; }
	int hash = IndexMap[id].x;

	if (id == 0 || hash != IndexMap[id - 1].x)
		Table[hash].x = id;

	if (id == TotalParticles - 1 || hash != IndexMap[id + 1].x)
		Table[hash].y = id;
}
